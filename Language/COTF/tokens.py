#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS


__version__ = (2015, 11, 15, 8, 56, 58, 6)

__all__ = [
    'grammarParser',
    'grammarSemantics',
    'main'
]


class grammarParser(Parser):
    def __init__(self,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 left_recursion=True,
                 **kwargs):
        super(grammarParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            **kwargs
        )

    @graken()
    def _float_(self):
        with self._choice():
            with self._option():
                self._pattern(r'[0-9]+\.[0-9]+')
            with self._option():
                self._integer_()
                self._token('f')
            self._error('expecting one of: [0-9]+\\.[0-9]+')

    @graken()
    def _integer_(self):
        self._pattern(r'[0-9]+')

    @graken()
    def _number_(self):
        with self._choice():
            with self._option():
                self._float_()
            with self._option():
                self._integer_()
            self._error('no available options')

    @graken()
    def _keyword_(self):
        self._pattern(r'[\w_]+')

    @graken()
    def _string_(self):
        with self._choice():
            with self._option():
                self._pattern(r'"[^"]*"')
            with self._option():
                self._pattern(r"'[^']*'")
            self._error('expecting one of: "[^"]*" \'[^\']*\'')

    @graken()
    def _call_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._keyword_()
                with self._option():
                    self._contain_()
                with self._option():
                    self._getattr_()
                self._error('no available options')
        self.ast['call'] = self.last_node
        self._tuple_()
        self.ast['arguments'] = self.last_node

        self.ast._define(
            ['call', 'arguments'],
            []
        )

    @graken()
    def _tuple_(self):
        with self._choice():
            with self._option():
                self._token('()')
            with self._option():
                self._token('(')

                def block0():
                    self._expr_()
                    self.ast.setlist('@', self.last_node)
                    self._pattern(r',?')
                self._closure(block0)
                self._token(')')
            self._error('expecting one of: ( ()')

    @graken()
    def _contain_(self):
        self._token('`')
        self._expr_()
        self.ast['@'] = self.last_node
        self._token('`')

    @graken()
    def _getattr_(self):
        self._expr_()
        self.ast['getattr'] = self.last_node

        def block1():
            self._token('.')
            self._keyword_()
            self.ast.setlist('get', self.last_node)
        self._positive_closure(block1)

        self.ast._define(
            ['getattr'],
            ['get']
        )

    @graken()
    def _codeblock_(self):
        self._token('{')
        self._code_()
        self.ast['@'] = self.last_node
        self._token('}')

    @graken()
    def _funcblock_(self):
        self._token('()')
        self._codeblock_()
        self.ast['func'] = self.last_node

        self.ast._define(
            ['func'],
            []
        )

    @graken()
    def _expr_(self):
        with self._choice():
            with self._option():
                self._contain_()
            with self._option():
                self._funcdef_()
            with self._option():
                self._funcblock_()
            with self._option():
                self._call_()
            with self._option():
                self._tuple_()
            with self._option():
                self._codeblock_()
            with self._option():
                self._set_()
            with self._option():
                self._operation_()
            with self._option():
                self._not_()
            with self._option():
                self._number_()
            with self._option():
                self._getattr_()
            with self._option():
                self._keyword_()
            with self._option():
                self._string_()
            self._error('no available options')

    @graken()
    def _OPERATION_(self):
        with self._choice():
            with self._option():
                self._token('+')
            with self._option():
                self._token('-')
            with self._option():
                self._token('*')
            with self._option():
                self._token('/')
            with self._option():
                self._token('%')
            with self._option():
                self._token('|')
            with self._option():
                self._token('&')
            with self._option():
                self._token('==')
            with self._option():
                self._token('!=')
            with self._option():
                self._token('>')
            with self._option():
                self._token('<')
            with self._option():
                self._token('<=')
            with self._option():
                self._token('>=')
            self._error('expecting one of: != % & * + - / < <= == > >= |')

    @graken()
    def _operation_(self):
        self._expr_()
        self.ast.setlist('input', self.last_node)
        self._OPERATION_()
        self.ast['op'] = self.last_node
        self._expr_()
        self.ast.setlist('input', self.last_node)

        self.ast._define(
            ['op'],
            ['input']
        )

    @graken()
    def _funcdef_(self):
        self._keyword_()
        self.ast['function'] = self.last_node
        self._token('()')
        self._token('=')
        self._expr_()
        self.ast['value'] = self.last_node

        self.ast._define(
            ['function', 'value'],
            []
        )

    @graken()
    def _set_(self):
        self._keyword_()
        self.ast['variable'] = self.last_node
        self._token('=')
        self._expr_()
        self.ast['value'] = self.last_node

        self.ast._define(
            ['variable', 'value'],
            []
        )

    @graken()
    def _not_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('!')
                with self._option():
                    self._token('not')
                self._error('expecting one of: ! not')
        self._expr_()
        self.ast['not_'] = self.last_node

        self.ast._define(
            ['not'],
            []
        )

    @graken()
    def _code_(self):

        def block0():
            self._expr_()
            self.ast.setlist('code', self.last_node)
            self._token(';')
        self._closure(block0)

        self.ast._define(
            [],
            ['code']
        )

    @graken()
    def _root_(self):
        self._code_()


class grammarSemantics(object):
    def float(self, ast):
        return ast

    def integer(self, ast):
        return ast

    def number(self, ast):
        return ast

    def keyword(self, ast):
        return ast

    def string(self, ast):
        return ast

    def call(self, ast):
        return ast

    def tuple(self, ast):
        return ast

    def contain(self, ast):
        return ast

    def getattr(self, ast):
        return ast

    def codeblock(self, ast):
        return ast

    def funcblock(self, ast):
        return ast

    def expr(self, ast):
        return ast

    def OPERATION(self, ast):
        return ast

    def operation(self, ast):
        return ast

    def funcdef(self, ast):
        return ast

    def set(self, ast):
        return ast

    def not_(self, ast):
        return ast

    def code(self, ast):
        return ast

    def root(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None, nameguard=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = grammarParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in grammarParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for grammar.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-n', '--no-nameguard', action='store_true',
                        dest='no_nameguard',
                        help="disable the 'nameguard' feature")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(
        args.file,
        args.startrule,
        trace=args.trace,
        whitespace=args.whitespace,
        nameguard=not args.no_nameguard
    )
